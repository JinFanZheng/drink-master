name: Auto PR Review & Merge

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
    branches: [main]
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: [main]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  auto-review:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # 获取完整历史以便进行风险分析

      - name: PR Risk Assessment
        id: risk-assessment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
        run: |
          echo "🔍 分析PR风险等级..."
          
          # 获取变更文件列表
          CHANGED_FILES=$(gh pr diff $PR_NUMBER --name-only)
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # 获取PR标题判断类型
          PR_TITLE=$(gh pr view $PR_NUMBER --json title -q .title)
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          
          # 风险等级评估
          RISK_LEVEL="low"
          RISK_REASONS=""
          
          # 检查高风险变更
          if echo "$CHANGED_FILES" | grep -E "(internal/contracts|migrations/|internal/models|security|auth)"; then
            RISK_LEVEL="high"
            RISK_REASONS="检测到高风险文件变更（契约/数据库/安全）"
            echo "🚨 高风险变更检测"
          elif echo "$CHANGED_FILES" | grep -E "(internal/handlers|internal/services)"; then
            RISK_LEVEL="medium"
            RISK_REASONS="检测到业务逻辑变更"
            echo "⚠️ 中风险变更检测"
          elif echo "$PR_TITLE" | grep -E "^(feat|fix|refactor):"; then
            RISK_LEVEL="medium"
            RISK_REASONS="功能/修复/重构类型变更"
            echo "⚠️ 中风险变更检测"
          elif echo "$PR_TITLE" | grep -E "^(docs|style|test|chore):"; then
            RISK_LEVEL="low"
            RISK_REASONS="低风险变更类型"
            echo "✅ 低风险变更检测"
          fi
          
          echo "risk_level=$RISK_LEVEL" >> $GITHUB_OUTPUT
          echo "risk_reasons=$RISK_REASONS" >> $GITHUB_OUTPUT
          echo "风险等级: $RISK_LEVEL - $RISK_REASONS"

      - name: Basic Validation Checks
        id: basic-checks
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
        run: |
          echo "🔍 执行基础验证检查..."
          
          # 检查可合并状态
          MERGEABLE=$(gh pr view $PR_NUMBER --json mergeable -q .mergeable)
          if [ "$MERGEABLE" != "true" ]; then
            echo "❌ PR存在合并冲突"
            echo "mergeable=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "✅ 无合并冲突"
          echo "mergeable=true" >> $GITHUB_OUTPUT
          
          # 检查Issue链接
          ISSUE_LINK=$(gh pr view $PR_NUMBER --json body -q .body | grep -E "(Fixes|Closes) #[0-9]+" || echo "")
          if [ -z "$ISSUE_LINK" ]; then
            echo "⚠️ 未发现Issue链接"
            echo "has_issue_link=false" >> $GITHUB_OUTPUT
          else
            echo "✅ 发现Issue链接: $ISSUE_LINK"
            echo "has_issue_link=true" >> $GITHUB_OUTPUT
          fi

      - name: Check CI Status
        if: steps.basic-checks.outputs.mergeable == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
        run: |
          echo "🔍 检查CI状态..."
          
          # 等待CI完成并检查状态
          echo "等待CI工作流完成..."
          timeout 300s bash -c '
            while true; do
              CI_STATUS=$(gh pr checks $PR_NUMBER --json state,conclusion | jq -r ".[] | select(.name==\"CI\") | .conclusion")
              if [ "$CI_STATUS" = "success" ]; then
                echo "✅ CI检查通过"
                break
              elif [ "$CI_STATUS" = "failure" ] || [ "$CI_STATUS" = "cancelled" ]; then
                echo "❌ CI检查失败: $CI_STATUS"
                exit 1
              else
                echo "⏳ CI正在运行，等待中..."
                sleep 10
              fi
            done
          '
          
          echo "✅ 所有质量检查已通过"

      - name: Additional Validation for Medium/High Risk
        if: steps.risk-assessment.outputs.risk_level == 'medium' || steps.risk-assessment.outputs.risk_level == 'high'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
        run: |
          echo "🧪 执行额外验证..."
          
          # 对于中高风险PR，进行额外的检查
          if [ "${{ steps.risk-assessment.outputs.risk_level }}" = "high" ]; then
            echo "🚨 高风险PR需要额外关注"
            # 检查是否有breaking changes
            if gh pr view $PR_NUMBER --json body | grep -i -E "(breaking|BREAKING)"; then
              echo "⚠️ 发现潜在的破坏性变更"
            fi
          fi
          
          echo "✅ 额外验证完成"

      - name: GitHub Copilot Code Review (Medium/High Risk)
        if: steps.risk-assessment.outputs.risk_level != 'low'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
        run: |
          echo "🤖 GitHub Copilot代码审查..."
          
          # 模拟Copilot审查（实际部署时需要配置GitHub Copilot API）
          echo "对PR #$PR_NUMBER 进行代码质量和逻辑审查..."
          
          # 检查代码复杂度
          if golangci-lint run --disable-all --enable=gocyclo; then
            echo "✅ 代码复杂度检查通过"
          else
            echo "⚠️ 发现复杂度较高的代码，建议优化"
            # 添加评论但不阻塞合并
            gh pr comment $PR_NUMBER --body "🤖 **自动代码审查建议**\n\n发现部分代码复杂度较高，建议考虑重构以提高可维护性。"
          fi

      - name: Auto Merge Decision
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
          RISK_LEVEL: ${{ steps.risk-assessment.outputs.risk_level }}
          RISK_REASONS: ${{ steps.risk-assessment.outputs.risk_reasons }}
        run: |
          echo "🎯 自动合并决策..."
          
          case "$RISK_LEVEL" in
            "low")
              echo "✅ 低风险PR，执行自动合并"
              gh pr merge $PR_NUMBER --squash --delete-branch
              gh pr comment $PR_NUMBER --body "🤖 **自动合并完成**\n\n- 风险等级: 低\n- 原因: $RISK_REASONS\n- 所有质量检查通过\n\n由AI代理自动处理 ✨"
              ;;
            "medium")
              echo "⚠️ 中风险PR，条件合并"
              if [ "${{ steps.basic-checks.outputs.has_issue_link }}" == "true" ]; then
                gh pr merge $PR_NUMBER --squash --delete-branch
                gh pr comment $PR_NUMBER --body "🤖 **自动合并完成**\n\n- 风险等级: 中\n- 原因: $RISK_REASONS\n- 所有验证检查通过\n- 功能测试正常\n\n由AI代理审查后自动处理 ✨"
              else
                gh pr edit $PR_NUMBER --add-label "needs-issue-link"
                gh pr comment $PR_NUMBER --body "⚠️ **需要补充信息**\n\n此PR缺少Issue链接，请在描述中添加 \`Fixes #<issue-number>\` 后重新触发检查。"
              fi
              ;;
            "high")
              echo "🚨 高风险PR，需要人工审核"
              gh pr edit $PR_NUMBER --add-label "needs-human-review"
              gh pr comment $PR_NUMBER --body "🚨 **需要人工审核**\n\n- 风险等级: 高\n- 原因: $RISK_REASONS\n\n此PR包含高风险变更，已标记需要人工审核。请相关负责人审核后手动合并。"
              ;;
          esac

      - name: Cleanup on Failure
        if: failure()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
        run: |
          echo "❌ 自动处理失败，添加标签并通知"
          gh pr edit $PR_NUMBER --add-label "auto-merge-failed"
          gh pr comment $PR_NUMBER --body "❌ **自动处理失败**\n\n自动合并流程遇到问题，请查看CI日志了解详情。可能需要手动修复后重新触发。"