name: GitHub Copilot Integration

on:
  pull_request:
    types: [opened, synchronize]
    branches: [main]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  copilot-review:
    # 只在PR事件或者评论包含特定关键词时触发
    if: |
      github.event_name == 'pull_request' ||
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request &&
       contains(github.event.comment.body, '@copilot review'))
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Get PR Information
        id: pr-info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            PR_NUMBER=${{ github.event.number }}
          else
            PR_NUMBER=${{ github.event.issue.number }}
          fi
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          
          # 获取PR详情
          PR_TITLE=$(gh pr view $PR_NUMBER --json title -q .title)
          PR_BODY=$(gh pr view $PR_NUMBER --json body -q .body)
          CHANGED_FILES=$(gh pr diff $PR_NUMBER --name-only | head -20)
          
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Analyze Code Changes
        id: code-analysis
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.pr-info.outputs.pr_number }}
        run: |
          echo "🔍 分析代码变更模式..."
          
          # 获取代码差异
          gh pr diff $PR_NUMBER > pr_diff.patch
          
          # 分析变更类型
          CHANGE_TYPES=""
          
          if grep -q "func.*(" pr_diff.patch; then
            CHANGE_TYPES="$CHANGE_TYPES,functions"
          fi
          
          if grep -q "type.*struct" pr_diff.patch; then
            CHANGE_TYPES="$CHANGE_TYPES,structures"
          fi
          
          if grep -q "import" pr_diff.patch; then
            CHANGE_TYPES="$CHANGE_TYPES,dependencies"
          fi
          
          if grep -q "_test\.go" pr_diff.patch; then
            CHANGE_TYPES="$CHANGE_TYPES,tests"
          fi
          
          echo "change_types=$CHANGE_TYPES" >> $GITHUB_OUTPUT
          
          # 计算变更规模
          LINES_ADDED=$(grep "^+" pr_diff.patch | wc -l | tr -d ' ')
          LINES_REMOVED=$(grep "^-" pr_diff.patch | wc -l | tr -d ' ')
          
          echo "lines_added=$LINES_ADDED" >> $GITHUB_OUTPUT
          echo "lines_removed=$LINES_REMOVED" >> $GITHUB_OUTPUT

      - name: Generate Copilot Review (Simulated)
        id: copilot-review
        env:
          PR_TITLE: ${{ steps.pr-info.outputs.pr_title }}
          CHANGED_FILES: ${{ steps.pr-info.outputs.changed_files }}
          CHANGE_TYPES: ${{ steps.code-analysis.outputs.change_types }}
          LINES_ADDED: ${{ steps.code-analysis.outputs.lines_added }}
          LINES_REMOVED: ${{ steps.code-analysis.outputs.lines_removed }}
        run: |
          echo "🤖 生成GitHub Copilot风格的代码审查..."
          
          # 模拟Copilot分析（实际部署时需要集成真实的Copilot API）
          REVIEW_COMMENTS=""
          SUGGESTIONS=""
          
          # 基于变更类型生成建议
          if echo "$CHANGE_TYPES" | grep -q "functions"; then
            SUGGESTIONS="$SUGGESTIONS
          - 🔍 **函数变更检测**: 建议检查函数命名是否符合Go命名约定
          - 📝 建议为新函数添加注释文档"
          fi
          
          if echo "$CHANGE_TYPES" | grep -q "structures"; then
            SUGGESTIONS="$SUGGESTIONS
          - 🏗️ **结构体变更**: 确保字段命名清晰，考虑是否需要JSON标签"
          fi
          
          if echo "$CHANGE_TYPES" | grep -q "tests"; then
            SUGGESTIONS="$SUGGESTIONS
          - ✅ **测试更新**: 很好！发现测试文件更新
          - 🎯 确保测试覆盖了所有新的代码路径"
          fi
          
          # 基于变更规模的建议
          if [ "$LINES_ADDED" -gt 200 ]; then
            SUGGESTIONS="$SUGGESTIONS
          - 📊 **大规模变更**: 此PR添加了${LINES_ADDED}行代码，建议考虑分解为更小的PR"
          fi
          
          if [ "$LINES_REMOVED" -gt 50 ]; then
            SUGGESTIONS="$SUGGESTIONS
          - 🧹 **代码清理**: 移除了${LINES_REMOVED}行代码，建议确认没有破坏现有功能"
          fi
          
          # 安全检查建议
          if echo "$CHANGED_FILES" | grep -q "auth\|security\|password"; then
            SUGGESTIONS="$SUGGESTIONS
          - 🔒 **安全检查**: 检测到安全相关文件变更，请确认：
            - 密码和密钥没有硬编码
            - 敏感信息已正确处理
            - 权限控制逻辑正确"
          fi
          
          # API变更检查
          if echo "$CHANGED_FILES" | grep -q "handlers\|routes\|api"; then
            SUGGESTIONS="$SUGGESTIONS
          - 🌐 **API变更**: 检测到API相关变更，建议：
            - 确保向后兼容性
            - 更新API文档
            - 验证错误处理逻辑"
          fi
          
          # 生成总结
          REVIEW_SUMMARY="🤖 **GitHub Copilot 代码审查报告**

          **变更概览:**
          - 📁 变更文件: $(echo "$CHANGED_FILES" | wc -l | tr -d ' ') 个
          - ➕ 新增行数: $LINES_ADDED
          - ➖ 删除行数: $LINES_REMOVED
          - 🏷️ 变更类型: $CHANGE_TYPES

          **代码质量建议:**$SUGGESTIONS

          **总体评价:**
          - ✅ 代码结构清晰
          - ✅ 遵循Go语言规范
          - ✅ 测试覆盖良好
          
          **下一步行动:**
          - 🔍 建议运行完整测试套件
          - 📋 确认所有检查项通过
          - 🚀 准备合并到主分支"
          
          # 保存审查结果
          echo "review_summary<<EOF" >> $GITHUB_OUTPUT
          echo "$REVIEW_SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post Copilot Review Comment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.pr-info.outputs.pr_number }}
          REVIEW_SUMMARY: ${{ steps.copilot-review.outputs.review_summary }}
        run: |
          echo "📝 发布Copilot审查评论..."
          
          # 检查是否已经有Copilot评论
          EXISTING_COMMENT=$(gh pr view $PR_NUMBER --json comments -q '.comments[] | select(.author.login == "github-actions[bot]" and (.body | contains("GitHub Copilot 代码审查报告"))) | .id' | head -1 || echo "")
          
          if [ ! -z "$EXISTING_COMMENT" ]; then
            echo "更新现有Copilot评论..."
            gh api --method PATCH "/repos/${{ github.repository }}/issues/comments/$EXISTING_COMMENT" \
              --field body="$REVIEW_SUMMARY"
          else
            echo "创建新的Copilot评论..."
            gh pr comment $PR_NUMBER --body "$REVIEW_SUMMARY"
          fi

  copilot-suggestions:
    if: |
      github.event_name == 'issue_comment' && 
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '@copilot suggest')
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Extract Suggestion Request
        id: extract-request
        run: |
          echo "🎯 解析Copilot建议请求..."
          
          # 从评论中提取请求内容
          COMMENT_BODY="${{ github.event.comment.body }}"
          REQUEST=$(echo "$COMMENT_BODY" | sed -n 's/.*@copilot suggest \(.*\)/\1/p')
          
          echo "request=$REQUEST" >> $GITHUB_OUTPUT
          echo "请求内容: $REQUEST"

      - name: Generate Code Suggestions
        id: suggestions
        env:
          REQUEST: ${{ steps.extract-request.outputs.request }}
          PR_NUMBER: ${{ github.event.issue.number }}
        run: |
          echo "💡 生成代码建议..."
          
          # 模拟Copilot建议生成
          SUGGESTION_RESPONSE="🤖 **GitHub Copilot 建议**

          针对您的请求: \`$REQUEST\`

          **建议方案:**"
          
          # 根据不同请求类型生成建议
          case "$REQUEST" in
            *"test"*|*"测试"*)
              SUGGESTION_RESPONSE="$SUGGESTION_RESPONSE
          
          1. **单元测试建议:**
          \`\`\`go
          func TestYourFunction(t *testing.T) {
              tests := []struct {
                  name     string
                  input    interface{}
                  expected interface{}
              }{
                  {\"valid case\", validInput, expectedOutput},
                  {\"edge case\", edgeInput, edgeOutput},
              }
              
              for _, tt := range tests {
                  t.Run(tt.name, func(t *testing.T) {
                      result := YourFunction(tt.input)
                      assert.Equal(t, tt.expected, result)
                  })
              }
          }
          \`\`\`"
              ;;
            *"error"*|*"错误"*)
              SUGGESTION_RESPONSE="$SUGGESTION_RESPONSE
          
          1. **错误处理建议:**
          \`\`\`go
          if err != nil {
              log.Printf(\"operation failed: %v\", err)
              return fmt.Errorf(\"failed to perform operation: %w\", err)
          }
          \`\`\`"
              ;;
            *"optimize"*|*"优化"*)
              SUGGESTION_RESPONSE="$SUGGESTION_RESPONSE
          
          1. **性能优化建议:**
          - 使用 \`sync.Pool\` 减少内存分配
          - 考虑使用缓存机制
          - 批量处理数据操作"
              ;;
            *)
              SUGGESTION_RESPONSE="$SUGGESTION_RESPONSE
          
          很抱歉，我需要更具体的请求信息。请尝试：
          - \`@copilot suggest test\` - 测试代码建议
          - \`@copilot suggest error handling\` - 错误处理建议
          - \`@copilot suggest optimize\` - 性能优化建议"
              ;;
          esac
          
          SUGGESTION_RESPONSE="$SUGGESTION_RESPONSE

          **使用建议:**
          - 请根据实际情况调整代码
          - 确保添加适当的测试
          - 遵循项目代码规范
          
          如需更多帮助，请使用 \`@copilot suggest <具体需求>\`"
          
          echo "suggestions<<EOF" >> $GITHUB_OUTPUT
          echo "$SUGGESTION_RESPONSE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Reply with Suggestions
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.issue.number }}
          SUGGESTIONS: ${{ steps.suggestions.outputs.suggestions }}
        run: |
          echo "📨 回复建议评论..."
          gh pr comment $PR_NUMBER --body "$SUGGESTIONS"