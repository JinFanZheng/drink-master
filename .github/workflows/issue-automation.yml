name: Issue Automation

on:
  issues:
    types: [opened, labeled, unlabeled, closed, reopened]
  issue_comment:
    types: [created]

jobs:
  issue-triage:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    steps:
      - name: Auto-label new issues
        if: github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('🏷️  Auto-labeling new issue...');
            const { owner, repo } = context.repo;
            const issue_number = context.payload.issue.number;
            const title = context.payload.issue.title.toLowerCase();
            const body = (context.payload.issue.body || '').toLowerCase();
            
            const labels = [];
            
            // Auto-assign priority based on keywords
            if (title.includes('urgent') || title.includes('critical') || body.includes('urgent')) {
              labels.push('priority-high');
            } else if (title.includes('important') || body.includes('important')) {
              labels.push('priority-medium');
            } else {
              labels.push('priority-low');
            }
            
            // Auto-assign type based on keywords
            if (title.includes('bug') || title.includes('error') || title.includes('fix')) {
              labels.push('bug');
            } else if (title.includes('feature') || title.includes('enhancement')) {
              labels.push('enhancement');
            } else if (title.includes('doc') || title.includes('documentation')) {
              labels.push('documentation');
            } else if (title.includes('api') || body.includes('api')) {
              labels.push('api');
            } else if (title.includes('backend') || body.includes('backend')) {
              labels.push('backend');
            }
            
            if (labels.length > 0) {
              try {
                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number,
                  labels
                });
                console.log(`✅ Added labels: ${labels.join(', ')}`);
              } catch (error) {
                console.error('❌ Failed to add labels:', error.message);
              }
            }

      - name: Welcome new contributors
        if: github.event.action == 'opened' && github.event.issue.author_association == 'FIRST_TIME_CONTRIBUTOR'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('👋 Welcoming new contributor...');
            const { owner, repo } = context.repo;
            const issue_number = context.payload.issue.number;
            
            const welcomeMessage = `
            👋 欢迎来到 drink-master 项目！感谢您提交第一个 Issue。

            为了帮助我们更好地处理您的请求，请确保：
            - 📋 提供清晰的问题描述或功能需求
            - 🔍 如果是 bug，请提供复现步骤
            - 🎯 如果是新功能，请说明使用场景

            我们会尽快查看并回复您的 Issue。如果您想要参与开发，可以查看：
            - 📚 [开发指南](docs/AGENT_ONBOARDING.md)
            - 🤝 [协作指南](docs/ROLES_COLLABORATION.md)
            `;
            
            try {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body: welcomeMessage.trim()
              });
              console.log('✅ Welcome comment posted');
            } catch (error) {
              console.error('❌ Failed to post welcome comment:', error.message);
            }
  issue-commands:
    if: github.event_name == 'issue_comment'
    runs-on: ubuntu-latest
    steps:
      - name: Handle issue commands
        uses: actions/github-script@v7
        with:
          script: |
            const body = (context.payload.comment.body || '').trim();
            const { owner, repo } = context.repo;
            const issue_number = context.payload.issue.number;
            const actor = context.actor;
            
            console.log(`Processing command: ${body}`);
            
            // Handle /claim command
            if (/^\/claim\b/.test(body)) {
              console.log('🎯 Processing /claim command...');
              try {
                // Assign commenter to the issue
                await github.rest.issues.addAssignees({ 
                  owner, 
                  repo, 
                  issue_number, 
                  assignees: [actor] 
                });
                
                // Add in-progress label
                await github.rest.issues.addLabels({ 
                  owner, 
                  repo, 
                  issue_number, 
                  labels: ['in-progress'] 
                });
                
                // Add confirmation comment
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number,
                  body: `✅ Issue claimed by @${actor}. Status updated to **in-progress**.`
                });
                
                console.log(`✅ Issue #${issue_number} claimed by ${actor}`);
              } catch (error) {
                console.error('❌ Failed to process /claim command:', error.message);
                
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number,
                  body: `❌ Failed to claim issue: ${error.message}`
                });
              }
              return;
            }
            
            // Handle /unclaim command
            if (/^\/unclaim\b/.test(body)) {
              console.log('🔄 Processing /unclaim command...');
              try {
                // Remove assignee
                await github.rest.issues.removeAssignees({ 
                  owner, 
                  repo, 
                  issue_number, 
                  assignees: [actor] 
                });
                
                // Remove in-progress label
                try {
                  await github.rest.issues.removeLabel({ 
                    owner, 
                    repo, 
                    issue_number, 
                    name: 'in-progress'
                  });
                } catch (e) {
                  // Label might not exist, which is fine
                  console.log('Label "in-progress" not found, skipping removal');
                }
                
                // Add confirmation comment
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number,
                  body: `🔄 Issue unclaimed by @${actor}. Available for others to claim.`
                });
                
                console.log(`✅ Issue #${issue_number} unclaimed by ${actor}`);
              } catch (error) {
                console.error('❌ Failed to process /unclaim command:', error.message);
              }
              return;
            }
            
            // Handle /help command
            if (/^\/help\b/.test(body)) {
              console.log('❓ Processing /help command...');
              const helpMessage = `
              ## 🤖 Available Commands
              
              - \`/claim\` - Claim this issue and mark as in-progress
              - \`/unclaim\` - Unclaim this issue and make it available
              - \`/help\` - Show this help message
              
              ## 📋 Development Guidelines
              
              - 📚 Check [Development Guide](docs/AGENT_ONBOARDING.md) for workflow
              - 🤝 Review [Collaboration Guide](docs/ROLES_COLLABORATION.md) for roles
              - ✅ Ensure 80%+ test coverage before submitting PR
              - 🎯 Follow conventional commit format
              `;
              
              try {
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number,
                  body: helpMessage.trim()
                });
                console.log('✅ Help message posted');
              } catch (error) {
                console.error('❌ Failed to post help message:', error.message);
              }
              return;
            }
            
            console.log('No matching command found');