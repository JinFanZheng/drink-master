name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: drink_master_test
          MYSQL_USER: drink_master
          MYSQL_PASSWORD: testpassword
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Install development tools
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          
      - name: Wait for MySQL
        run: |
          until nc -z localhost 3306; do
            echo "Waiting for MySQL..."
            sleep 2
          done
          echo "‚úÖ MySQL is ready"

      - name: Run linting
        run: |
          echo "üîç Running Go linting..."
          golangci-lint run --timeout=5m
          go fmt ./...
          go vet ./...
          echo "‚úÖ Linting completed"

      - name: Run tests
        env:
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USER: drink_master
          DB_PASSWORD: testpassword
          DB_NAME: drink_master_test
          JWT_SECRET: test_jwt_secret_for_ci
          GIN_MODE: test
        run: |
          echo "üß™ Running tests with coverage..."
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html
          echo "‚úÖ Tests completed"

      - name: Check test coverage
        run: |
          echo "üìä Checking test coverage..."
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Test coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "‚ùå Test coverage is below 70%"
            exit 1
          fi
          echo "‚úÖ Test coverage meets requirements (‚â•70%)"

      - name: Build application
        run: |
          echo "üî® Building application..."
          go build -v -o bin/drink-master cmd/server/main.go
          echo "‚úÖ Build completed successfully"
          
      - name: Test build artifacts
        run: |
          echo "Checking build artifacts..."
          ls -la bin/
          test -f bin/drink-master && echo "‚úÖ Binary exists"
          file bin/drink-master
          echo "‚úÖ Build artifacts validated"

      - name: Validate application startup (dry run)
        env:
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USER: drink_master
          DB_PASSWORD: testpassword
          DB_NAME: drink_master_test
          JWT_SECRET: test_jwt_secret_for_ci
          GIN_MODE: test
        run: |
          echo "üöÄ Testing application startup..."
          timeout 10s ./bin/drink-master &
          PID=$!
          sleep 5
          if ps -p $PID > /dev/null; then
            echo "‚úÖ Application started successfully"
            kill $PID
          else
            echo "‚ùå Application failed to start"
            exit 1
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary
          path: bin/drink-master