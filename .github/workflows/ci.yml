name: CI

on:
  pull_request:
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'README*'
      - 'CHANGELOG*'
      - 'LICENSE*'
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'README*'
      - 'CHANGELOG*'
      - 'LICENSE*'

jobs:
  test:
    runs-on: ubuntu-latest
    
    # MySQL服务暂时注释，后续需要时再启用
    # services:
    #   mysql:
    #     image: mysql:8.0
    #     env:
    #       MYSQL_ROOT_PASSWORD: rootpassword
    #       MYSQL_DATABASE: drink_master_test
    #       MYSQL_USER: drink_master
    #       MYSQL_PASSWORD: testpassword
    #     ports:
    #       - 3306:3306
    #     options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true
          cache-dependency-path: go.sum

      # 缓存开发工具，避免重复安装
      - name: Cache development tools
        uses: actions/cache@v4
        id: cache-tools
        with:
          path: |
            ~/.local/bin
            ~/go/bin
          key: dev-tools-${{ runner.os }}-${{ hashFiles('**/go.mod') }}
          restore-keys: |
            dev-tools-${{ runner.os }}-

      - name: Install dependencies
        run: go mod download

      - name: Install development tools
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.59.1

      - name: Run linting
        run: |
          echo "🔍 Running Go linting..."
          golangci-lint run --timeout=3m
          go fmt ./...
          go vet ./...
          echo "✅ Linting completed"

      # 根据事件类型条件化执行测试
      - name: Run tests (fast)
        if: github.event_name == 'push'
        env:
          JWT_SECRET: test_jwt_secret_for_ci
          GIN_MODE: test
        run: |
          echo "🧪 Running tests with coverage..."
          go test -coverprofile=coverage.out ./...
          echo "✅ Tests completed"

      - name: Run tests with race detection (PR only)
        if: github.event_name == 'pull_request'
        env:
          JWT_SECRET: test_jwt_secret_for_ci
          GIN_MODE: test
        run: |
          echo "🧪 Running tests with race detection and coverage..."
          go test -race -coverprofile=coverage.out ./...
          echo "✅ Tests completed"

      - name: Check test coverage
        run: |
          echo "📊 Checking test coverage..."
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Test coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "❌ Test coverage is below 70%"
            exit 1
          fi
          echo "✅ Test coverage meets requirements (≥70%)"

      - name: Build application
        run: |
          echo "🔨 Building application..."
          go build -o bin/drink-master cmd/server/main.go
          echo "✅ Build completed successfully"
          
      - name: Validate binary
        run: |
          echo "Validating build artifacts..."
          test -f bin/drink-master && echo "✅ Binary exists"
          file bin/drink-master
          echo "✅ Build artifacts validated"

      # 仅在PR时生成和上传覆盖率报告
      - name: Generate coverage report
        if: github.event_name == 'pull_request'
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html